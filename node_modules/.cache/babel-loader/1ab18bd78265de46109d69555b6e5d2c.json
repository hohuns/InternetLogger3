{"ast":null,"code":"import{createSlice,configureStore}from\"@reduxjs/toolkit\";var initialState={user:\"\",idToken:\"\",isLoggedIn:false,lan:\"\"};var userSlice=createSlice({name:\"user\",initialState:initialState,reducers:{updateUser:function updateUser(state,action){state.user=action.payload;},updateIdToken:function updateIdToken(state,action){state.idToken=action.payload;},updateIsLoggedIn:function updateIsLoggedIn(state,action){state.isLoggedIn=action.payload;},updateLanguage:function updateLanguage(state,action){state.lan=action.payload;}}});//Create the store\nvar store=configureStore({reducer:userSlice.reducer});export var usersActions=userSlice.actions;export default store;","map":{"version":3,"sources":["/Users/sungjaejoo/Desktop/리액트/인터로거/깃허브/ILP-main/src/store/userSlice.ts"],"names":["createSlice","configureStore","initialState","user","idToken","isLoggedIn","lan","userSlice","name","reducers","updateUser","state","action","payload","updateIdToken","updateIsLoggedIn","updateLanguage","store","reducer","usersActions","actions"],"mappings":"AAAA,OAASA,WAAT,CAAsBC,cAAtB,KAA2D,kBAA3D,CASA,GAAMC,CAAAA,YAA0B,CAAG,CACjCC,IAAI,CAAE,EAD2B,CAEjCC,OAAO,CAAE,EAFwB,CAGjCC,UAAU,CAAE,KAHqB,CAIjCC,GAAG,CAAE,EAJ4B,CAAnC,CAOA,GAAMC,CAAAA,SAAS,CAAGP,WAAW,CAAC,CAC5BQ,IAAI,CAAE,MADsB,CAE5BN,YAAY,CAAEA,YAFc,CAG5BO,QAAQ,CAAE,CACRC,UADQ,qBACGC,KADH,CACUC,MADV,CACyC,CAC/CD,KAAK,CAACR,IAAN,CAAaS,MAAM,CAACC,OAApB,CACD,CAHO,CAIRC,aAJQ,wBAIMH,KAJN,CAIaC,MAJb,CAI4C,CAClDD,KAAK,CAACP,OAAN,CAAgBQ,MAAM,CAACC,OAAvB,CACD,CANO,CAORE,gBAPQ,2BAOSJ,KAPT,CAOgBC,MAPhB,CAOgD,CACtDD,KAAK,CAACN,UAAN,CAAmBO,MAAM,CAACC,OAA1B,CACD,CATO,CAURG,cAVQ,yBAUOL,KAVP,CAUcC,MAVd,CAU6C,CACnDD,KAAK,CAACL,GAAN,CAAYM,MAAM,CAACC,OAAnB,CACD,CAZO,CAHkB,CAAD,CAA7B,CAmBA;AACA,GAAMI,CAAAA,KAAK,CAAGhB,cAAc,CAAC,CAC3BiB,OAAO,CAAEX,SAAS,CAACW,OADQ,CAAD,CAA5B,CAIA,MAAO,IAAMC,CAAAA,YAAY,CAAGZ,SAAS,CAACa,OAA/B,CACP,cAAeH,CAAAA,KAAf","sourcesContent":["import { createSlice, configureStore, PayloadAction } from \"@reduxjs/toolkit\";\n\ntype initialState = {\n  user: string;\n  idToken: string;\n  isLoggedIn: boolean;\n  lan: string;\n};\n\nconst initialState: initialState = {\n  user: \"\",\n  idToken: \"\",\n  isLoggedIn: false,\n  lan: \"\",\n};\n\nconst userSlice = createSlice({\n  name: \"user\",\n  initialState: initialState,\n  reducers: {\n    updateUser(state, action: PayloadAction<string>) {\n      state.user = action.payload;\n    },\n    updateIdToken(state, action: PayloadAction<string>) {\n      state.idToken = action.payload;\n    },\n    updateIsLoggedIn(state, action: PayloadAction<boolean>) {\n      state.isLoggedIn = action.payload;\n    },\n    updateLanguage(state, action: PayloadAction<string>) {\n      state.lan = action.payload;\n    },\n  },\n});\n\n//Create the store\nconst store = configureStore({\n  reducer: userSlice.reducer,\n});\n\nexport const usersActions = userSlice.actions;\nexport default store;\nexport type RootState = ReturnType<typeof store.getState>;\nexport type AppDispatch = typeof store.dispatch;\n"]},"metadata":{},"sourceType":"module"}