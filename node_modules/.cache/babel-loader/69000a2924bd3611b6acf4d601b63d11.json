{"ast":null,"code":"import React,{useEffect}from\"react\";import{Routes,Route,Navigate}from\"react-router-dom\";import\"./App.css\";import Login from\"./pages/Login\";import Layout from\"./components/Layout/Layout\";import MessageLogEn from\"./pages/MessageLogEn\";import SignIn from\"./pages/SignIn\";import ChangePassword from\"./pages/ChangePassword\";import ChangeUserName from\"./pages/ChangeUserName\";import InitialPage from\"./pages/InitialPage\";// import { useSelector, useDispatch } from \"react-redux\";\nimport{useAppSelector,useAppDispatch}from\"./store/hooks\";import{usersActions}from\"./store/userSlice\";import{CssBaseline}from\"@material-ui/core\";function App(){var _ref;var reduxIsLoggedIn=useAppSelector(function(state){return state.isLoggedIn;});var reduxUser=useAppSelector(function(state){return state.user;});var dispatch=useAppDispatch();var storedToken=localStorage.getItem(\"token\");var storedIsLoggedIn=((_ref=localStorage.getItem(\"isLoggedIn\"))===null||_ref===void 0?void 0:_ref.toLowerCase())===\"true\";var storedUser=localStorage.getItem(\"user\");useEffect(function(){if(storedIsLoggedIn){dispatch(usersActions.updateIdToken(storedToken));dispatch(usersActions.updateUser(storedUser));dispatch(usersActions.updateIsLoggedIn(storedIsLoggedIn));}},[storedToken,storedIsLoggedIn,storedUser,dispatch]);return/*#__PURE__*/React.createElement(React.Fragment,null,/*#__PURE__*/React.createElement(CssBaseline,null),/*#__PURE__*/React.createElement(Layout,null,/*#__PURE__*/React.createElement(Routes,null,reduxIsLoggedIn?/*#__PURE__*/React.createElement(Route,{path:\"*\",element:/*#__PURE__*/React.createElement(Navigate,{to:\"/initialpage\"})}):/*#__PURE__*/React.createElement(Route,{path:\"*\",element:/*#__PURE__*/React.createElement(Navigate,{to:\"/login\"})}),!reduxIsLoggedIn&&/*#__PURE__*/React.createElement(Route,{path:\"/login\",element:/*#__PURE__*/React.createElement(Login,null)}),reduxIsLoggedIn&&/*#__PURE__*/React.createElement(Route,{path:\"/initialpage\",element:/*#__PURE__*/React.createElement(InitialPage,null)}),!reduxIsLoggedIn&&/*#__PURE__*/React.createElement(Route,{path:\"/signin\",element:/*#__PURE__*/React.createElement(SignIn,null)}),reduxIsLoggedIn&&/*#__PURE__*/React.createElement(Route,{path:\"/msglog\",element:/*#__PURE__*/React.createElement(MessageLogEn,null)}),reduxIsLoggedIn&&/*#__PURE__*/React.createElement(Route,{path:\"/updateusername\",element:/*#__PURE__*/React.createElement(ChangeUserName,null)}),reduxIsLoggedIn&&/*#__PURE__*/React.createElement(Route,{path:\"/changepassword\",element:/*#__PURE__*/React.createElement(ChangePassword,null)}))));}export default App;","map":{"version":3,"sources":["/Users/sungjaejoo/Desktop/리액트/인터로거/깃허브/ILP-main/src/App.tsx"],"names":["React","useEffect","Routes","Route","Navigate","Login","Layout","MessageLogEn","SignIn","ChangePassword","ChangeUserName","InitialPage","useAppSelector","useAppDispatch","usersActions","CssBaseline","App","reduxIsLoggedIn","state","isLoggedIn","reduxUser","user","dispatch","storedToken","localStorage","getItem","storedIsLoggedIn","toLowerCase","storedUser","updateIdToken","updateUser","updateIsLoggedIn"],"mappings":"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","sourcesContent":["import React, { useEffect } from \"react\";\nimport { Routes, Route, Navigate } from \"react-router-dom\";\nimport \"./App.css\";\nimport Login from \"./pages/Login\";\nimport Layout from \"./components/Layout/Layout\";\nimport MessageLogEn from \"./pages/MessageLogEn\";\nimport SignIn from \"./pages/SignIn\";\nimport ChangePassword from \"./pages/ChangePassword\";\nimport ChangeUserName from \"./pages/ChangeUserName\";\nimport InitialPage from \"./pages/InitialPage\";\n// import { useSelector, useDispatch } from \"react-redux\";\nimport { useAppSelector, useAppDispatch } from \"./store/hooks\";\nimport { usersActions } from \"./store/userSlice\";\nimport { CssBaseline } from \"@material-ui/core\";\n\nfunction App() {\n  const reduxIsLoggedIn: boolean = useAppSelector((state) => state.isLoggedIn);\n  const reduxUser: string = useAppSelector((state) => state.user);\n  const dispatch = useAppDispatch();\n  const storedToken: string = localStorage.getItem(\"token\") as string;\n  const storedIsLoggedIn: boolean =\n    localStorage.getItem(\"isLoggedIn\")!?.toLowerCase() === \"true\";\n  const storedUser: string = localStorage.getItem(\"user\") as string;\n\n  useEffect(() => {\n    if (storedIsLoggedIn) {\n      dispatch(usersActions.updateIdToken(storedToken));\n      dispatch(usersActions.updateUser(storedUser));\n      dispatch(usersActions.updateIsLoggedIn(storedIsLoggedIn));\n    }\n  }, [storedToken, storedIsLoggedIn, storedUser, dispatch]);\n\n  return (\n    <>\n      <CssBaseline />\n      <Layout>\n        <Routes>\n          {reduxIsLoggedIn ? (\n            <Route path=\"*\" element={<Navigate to=\"/initialpage\" />} />\n          ) : (\n            <Route path=\"*\" element={<Navigate to=\"/login\" />} />\n          )}\n          {!reduxIsLoggedIn && (\n            <Route path=\"/login\" element={<Login></Login>} />\n          )}\n          {reduxIsLoggedIn && (\n            <Route path=\"/initialpage\" element={<InitialPage></InitialPage>} />\n          )}\n          {!reduxIsLoggedIn && (\n            <Route path=\"/signin\" element={<SignIn></SignIn>} />\n          )}\n          {reduxIsLoggedIn && (\n            <Route path=\"/msglog\" element={<MessageLogEn></MessageLogEn>} />\n          )}\n\n          {reduxIsLoggedIn && (\n            <Route\n              path=\"/updateusername\"\n              element={<ChangeUserName></ChangeUserName>}\n            />\n          )}\n          {reduxIsLoggedIn && (\n            <Route\n              path=\"/changepassword\"\n              element={<ChangePassword></ChangePassword>}\n            />\n          )}\n        </Routes>\n      </Layout>\n    </>\n  );\n}\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}