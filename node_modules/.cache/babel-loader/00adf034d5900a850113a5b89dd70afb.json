{"ast":null,"code":"var _jsxFileName = \"/Users/sungjaejoo/Desktop/\\u1105\\u1175\\u110B\\u1162\\u11A8\\u1110\\u1173/\\u110B\\u1175\\u11AB\\u1110\\u1165\\u1105\\u1169\\u1100\\u1165/\\u1100\\u1175\\u11BA\\u1112\\u1165\\u1107\\u1173/ILP-main/src/components/MessageLogForm/MessageLogFormKr.tsx\";\nimport React, { useState, useEffect, useCallback } from \"react\";\nimport AddNoteKr from \"./AddNoteKr\";\nimport { useAppSelector, useAppDispatch } from \"../../store/hooks\";\nimport { useNavigate } from \"react-router-dom\";\nimport NoteListKr from \"./NoteListKr\";\n\nconst MessageLogFormKr = () => {\n  const reduxUser = useAppSelector(state => state.user);\n  const dispatch = useAppDispatch();\n  const [note, setNote] = useState([]);\n  const [error, setError] = useState(\"\");\n  const [isLoading, setIsLoading] = useState(false);\n  const [isbuttonPressed, setIsbuttonPressed] = useState(false);\n  let navigate = useNavigate();\n  const fetchNoteHandlerKr = useCallback(async () => {\n    setIsLoading(true);\n    setError(\"\");\n\n    try {\n      const response = await fetch(\"https://react-http-2887f-default-rtdb.firebaseio.com/notes2.json\");\n\n      if (!response.ok) {\n        throw new Error(\"Something went wrong!\");\n      }\n\n      const data = await response.json();\n      const loadedNotes = [];\n\n      for (const key in data) {\n        loadedNotes.push({\n          id: key,\n          title: data[key].title,\n          text: data[key].text,\n          date: `${data[key].logger}님이 ${data[key].date}에 남기셨습니다..`\n        });\n      }\n\n      loadedNotes.reverse();\n      console.log(loadedNotes);\n      setNote(loadedNotes);\n    } catch (err) {\n      if (err instanceof Error) {\n        setError(err.message);\n      }\n    }\n\n    setIsLoading(false);\n  }, []);\n\n  async function addNoteHandlerKr(note) {\n    const response = await fetch(\"https://react-http-2887f-default-rtdb.firebaseio.com/notes2.json\", {\n      method: \"POST\",\n      body: JSON.stringify(note),\n      headers: {\n        \"Content-Type\": \"appication/json\"\n      }\n    });\n    const data = await response.json();\n    console.log(data);\n    alert(`메세지가 성공적으로 추가되었습니다.`);\n    fetchNoteHandlerKr();\n  }\n\n  useEffect(() => {\n    fetchNoteHandlerKr();\n  }, [fetchNoteHandlerKr]);\n  let content = /*#__PURE__*/React.createElement(\"p\", {\n    style: {\n      color: \"white\"\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 77,\n      columnNumber: 17\n    }\n  }, \"Found no Notes.\");\n\n  if (note.length > 0) {\n    content = /*#__PURE__*/React.createElement(NoteListKr, {\n      note: note,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 80,\n        columnNumber: 15\n      }\n    });\n  }\n\n  if (error) {\n    content = /*#__PURE__*/React.createElement(\"p\", {\n      style: {\n        color: \"white\"\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 84,\n        columnNumber: 15\n      }\n    }, error);\n  }\n\n  if (isLoading) {\n    content = /*#__PURE__*/React.createElement(\"p\", {\n      style: {\n        color: \"white\"\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 88,\n        columnNumber: 15\n      }\n    }, \"Loading...\");\n  }\n\n  return /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 92,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(\"section\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 93,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(\"h3\", {\n    style: {\n      color: \"white\"\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 94,\n      columnNumber: 9\n    }\n  }, \"\\uBC18\\uAC11\\uC2B5\\uB2C8\\uB2E4.. \", reduxUser, \"\\uB2D8.... \"), /*#__PURE__*/React.createElement(\"button\", {\n    onClick: fetchNoteHandlerKr,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 95,\n      columnNumber: 9\n    }\n  }, \"\\uBA54\\uC138\\uC9C0 \\uC5C5\\uB370\\uC774\\uD2B8\"), /*#__PURE__*/React.createElement(\"button\", {\n    onClick: () => {\n      setIsbuttonPressed(true);\n    },\n    style: {\n      marginLeft: \"20px\"\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 96,\n      columnNumber: 9\n    }\n  }, \"\\uBA54\\uC138\\uC9C0 \\uC801\\uAE30\")), isbuttonPressed && /*#__PURE__*/React.createElement(\"section\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 106,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(\"h3\", {\n    style: {\n      color: \"white\"\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 107,\n      columnNumber: 11\n    }\n  }, \"\\uBA54\\uC138\\uC9C0 \\uC591\\uC2DD\"), /*#__PURE__*/React.createElement(AddNoteKr, {\n    AddNote: addNoteHandlerKr,\n    logger: reduxUser,\n    setIsbuttonPressed: setIsbuttonPressed,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 108,\n      columnNumber: 11\n    }\n  })), /*#__PURE__*/React.createElement(\"section\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 115,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(\"h3\", {\n    style: {\n      color: \"white\"\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 116,\n      columnNumber: 9\n    }\n  }, \"\\uBA54\\uC138\\uC9C0 \\uB85C\\uADF8\"), content));\n};\n\nexport default MessageLogFormKr;","map":{"version":3,"sources":["/Users/sungjaejoo/Desktop/리액트/인터로거/깃허브/ILP-main/src/components/MessageLogForm/MessageLogFormKr.tsx"],"names":["React","useState","useEffect","useCallback","AddNoteKr","useAppSelector","useAppDispatch","useNavigate","NoteListKr","MessageLogFormKr","reduxUser","state","user","dispatch","note","setNote","error","setError","isLoading","setIsLoading","isbuttonPressed","setIsbuttonPressed","navigate","fetchNoteHandlerKr","response","fetch","ok","Error","data","json","loadedNotes","key","push","id","title","text","date","logger","reverse","console","log","err","message","addNoteHandlerKr","method","body","JSON","stringify","headers","alert","content","color","length","marginLeft"],"mappings":"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","sourcesContent":["import React, { useState, useEffect, useCallback } from \"react\";\nimport AddNoteKr from \"./AddNoteKr\";\nimport { useAppSelector, useAppDispatch } from \"../../store/hooks\";\nimport { useNavigate } from \"react-router-dom\";\nimport { usersActions } from \"../../store/userSlice\";\nimport NoteListKr from \"./NoteListKr\";\nconst MessageLogFormKr = () => {\n  const reduxUser = useAppSelector((state) => state.user);\n  const dispatch = useAppDispatch();\n  const [note, setNote] = useState<\n    { id: string; title: any; text: any; date: string }[]\n  >([]);\n  const [error, setError] = useState<string>(\"\");\n  const [isLoading, setIsLoading] = useState<boolean>(false);\n  const [isbuttonPressed, setIsbuttonPressed] = useState<boolean>(false);\n  let navigate = useNavigate();\n\n  const fetchNoteHandlerKr = useCallback(async () => {\n    setIsLoading(true);\n    setError(\"\");\n    try {\n      const response = await fetch(\n        \"https://react-http-2887f-default-rtdb.firebaseio.com/notes2.json\"\n      );\n      if (!response.ok) {\n        throw new Error(\"Something went wrong!\");\n      }\n\n      const data = await response.json();\n      const loadedNotes: { id: string; title: any; text: any; date: string }[] =\n        [];\n      for (const key in data) {\n        loadedNotes.push({\n          id: key,\n          title: data[key].title,\n          text: data[key].text,\n          date: `${data[key].logger}님이 ${data[key].date}에 남기셨습니다..`,\n        });\n      }\n      loadedNotes.reverse();\n      console.log(loadedNotes);\n      setNote(loadedNotes);\n    } catch (err) {\n      if (err instanceof Error) {\n        setError(err.message);\n      }\n    }\n    setIsLoading(false);\n  }, []);\n\n  async function addNoteHandlerKr(note: {\n    id?: string;\n    title?: any;\n    text?: any;\n    date?: string;\n  }) {\n    const response = await fetch(\n      \"https://react-http-2887f-default-rtdb.firebaseio.com/notes2.json\",\n      {\n        method: \"POST\",\n        body: JSON.stringify(note),\n        headers: {\n          \"Content-Type\": \"appication/json\",\n        },\n      }\n    );\n    const data = await response.json();\n    console.log(data);\n    alert(`메세지가 성공적으로 추가되었습니다.`);\n    fetchNoteHandlerKr();\n  }\n\n  useEffect(() => {\n    fetchNoteHandlerKr();\n  }, [fetchNoteHandlerKr]);\n\n  let content = <p style={{ color: \"white\" }}>Found no Notes.</p>;\n\n  if (note.length > 0) {\n    content = <NoteListKr note={note} />;\n  }\n\n  if (error) {\n    content = <p style={{ color: \"white\" }}>{error}</p>;\n  }\n\n  if (isLoading) {\n    content = <p style={{ color: \"white\" }}>Loading...</p>;\n  }\n\n  return (\n    <div>\n      <section>\n        <h3 style={{ color: \"white\" }}>반갑습니다.. {reduxUser}님.... </h3>\n        <button onClick={fetchNoteHandlerKr}>메세지 업데이트</button>\n        <button\n          onClick={() => {\n            setIsbuttonPressed(true);\n          }}\n          style={{ marginLeft: \"20px\" }}\n        >\n          메세지 적기\n        </button>\n      </section>\n      {isbuttonPressed && (\n        <section>\n          <h3 style={{ color: \"white\" }}>메세지 양식</h3>\n          <AddNoteKr\n            AddNote={addNoteHandlerKr}\n            logger={reduxUser}\n            setIsbuttonPressed={setIsbuttonPressed}\n          ></AddNoteKr>\n        </section>\n      )}\n      <section>\n        <h3 style={{ color: \"white\" }}>메세지 로그</h3>\n        {content}\n      </section>\n    </div>\n  );\n};\n\nexport default MessageLogFormKr;\n"]},"metadata":{},"sourceType":"module"}