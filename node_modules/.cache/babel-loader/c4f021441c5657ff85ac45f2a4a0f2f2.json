{"ast":null,"code":"import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport { unstable_createCssVarsProvider as createCssVarsProvider } from '@mui/system';\nimport experimental_extendTheme from './experimental_extendTheme';\nimport createTypography from './createTypography';\n\nvar shouldSkipGeneratingVar = function shouldSkipGeneratingVar(keys) {\n  var _keys$;\n\n  return !!keys[0].match(/(typography|mixins|breakpoints|direction|transitions)/) || keys[0] === 'palette' && !!((_keys$ = keys[1]) != null && _keys$.match(/(mode|contrastThreshold|tonalOffset)/));\n};\n\nvar defaultTheme = experimental_extendTheme();\n\nvar _createCssVarsProvide = createCssVarsProvider({\n  theme: defaultTheme,\n  attribute: 'data-mui-color-scheme',\n  modeStorageKey: 'mui-mode',\n  colorSchemeStorageKey: 'mui-color-scheme',\n  defaultColorScheme: {\n    light: 'light',\n    dark: 'dark'\n  },\n  resolveTheme: function resolveTheme(theme) {\n    var newTheme = _extends({}, theme, {\n      typography: createTypography(theme.palette, theme.typography)\n    });\n\n    return newTheme;\n  },\n  shouldSkipGeneratingVar: shouldSkipGeneratingVar\n}),\n    CssVarsProvider = _createCssVarsProvide.CssVarsProvider,\n    useColorScheme = _createCssVarsProvide.useColorScheme,\n    getInitColorSchemeScript = _createCssVarsProvide.getInitColorSchemeScript;\n\nexport { useColorScheme, getInitColorSchemeScript, shouldSkipGeneratingVar, CssVarsProvider as Experimental_CssVarsProvider };","map":{"version":3,"sources":["/Users/sungjaejoo/Desktop/리액트/인터로거/깃허브/ILP-main/node_modules/@mui/material/styles/CssVarsProvider.js"],"names":["_extends","unstable_createCssVarsProvider","createCssVarsProvider","experimental_extendTheme","createTypography","shouldSkipGeneratingVar","keys","_keys$","match","defaultTheme","theme","attribute","modeStorageKey","colorSchemeStorageKey","defaultColorScheme","light","dark","resolveTheme","newTheme","typography","palette","CssVarsProvider","useColorScheme","getInitColorSchemeScript","Experimental_CssVarsProvider"],"mappings":"AAAA,OAAOA,QAAP,MAAqB,oCAArB;AACA,SAASC,8BAA8B,IAAIC,qBAA3C,QAAwE,aAAxE;AACA,OAAOC,wBAAP,MAAqC,4BAArC;AACA,OAAOC,gBAAP,MAA6B,oBAA7B;;AAEA,IAAMC,uBAAuB,GAAG,SAA1BA,uBAA0B,CAAAC,IAAI,EAAI;AACtC,MAAIC,MAAJ;;AAEA,SAAO,CAAC,CAACD,IAAI,CAAC,CAAD,CAAJ,CAAQE,KAAR,CAAc,uDAAd,CAAF,IAA4EF,IAAI,CAAC,CAAD,CAAJ,KAAY,SAAZ,IAAyB,CAAC,EAAE,CAACC,MAAM,GAAGD,IAAI,CAAC,CAAD,CAAd,KAAsB,IAAtB,IAA8BC,MAAM,CAACC,KAAP,CAAa,sCAAb,CAAhC,CAA7G;AACD,CAJD;;AAMA,IAAMC,YAAY,GAAGN,wBAAwB,EAA7C;;AACA,4BAIID,qBAAqB,CAAC;AACxBQ,EAAAA,KAAK,EAAED,YADiB;AAExBE,EAAAA,SAAS,EAAE,uBAFa;AAGxBC,EAAAA,cAAc,EAAE,UAHQ;AAIxBC,EAAAA,qBAAqB,EAAE,kBAJC;AAKxBC,EAAAA,kBAAkB,EAAE;AAClBC,IAAAA,KAAK,EAAE,OADW;AAElBC,IAAAA,IAAI,EAAE;AAFY,GALI;AASxBC,EAAAA,YAAY,EAAE,sBAAAP,KAAK,EAAI;AACrB,QAAMQ,QAAQ,GAAGlB,QAAQ,CAAC,EAAD,EAAKU,KAAL,EAAY;AACnCS,MAAAA,UAAU,EAAEf,gBAAgB,CAACM,KAAK,CAACU,OAAP,EAAgBV,KAAK,CAACS,UAAtB;AADO,KAAZ,CAAzB;;AAIA,WAAOD,QAAP;AACD,GAfuB;AAgBxBb,EAAAA,uBAAuB,EAAvBA;AAhBwB,CAAD,CAJzB;AAAA,IACEgB,eADF,yBACEA,eADF;AAAA,IAEEC,cAFF,yBAEEA,cAFF;AAAA,IAGEC,wBAHF,yBAGEA,wBAHF;;AAsBA,SAASD,cAAT,EAAyBC,wBAAzB,EAAmDlB,uBAAnD,EAA4EgB,eAAe,IAAIG,4BAA/F","sourcesContent":["import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport { unstable_createCssVarsProvider as createCssVarsProvider } from '@mui/system';\nimport experimental_extendTheme from './experimental_extendTheme';\nimport createTypography from './createTypography';\n\nconst shouldSkipGeneratingVar = keys => {\n  var _keys$;\n\n  return !!keys[0].match(/(typography|mixins|breakpoints|direction|transitions)/) || keys[0] === 'palette' && !!((_keys$ = keys[1]) != null && _keys$.match(/(mode|contrastThreshold|tonalOffset)/));\n};\n\nconst defaultTheme = experimental_extendTheme();\nconst {\n  CssVarsProvider,\n  useColorScheme,\n  getInitColorSchemeScript\n} = createCssVarsProvider({\n  theme: defaultTheme,\n  attribute: 'data-mui-color-scheme',\n  modeStorageKey: 'mui-mode',\n  colorSchemeStorageKey: 'mui-color-scheme',\n  defaultColorScheme: {\n    light: 'light',\n    dark: 'dark'\n  },\n  resolveTheme: theme => {\n    const newTheme = _extends({}, theme, {\n      typography: createTypography(theme.palette, theme.typography)\n    });\n\n    return newTheme;\n  },\n  shouldSkipGeneratingVar\n});\nexport { useColorScheme, getInitColorSchemeScript, shouldSkipGeneratingVar, CssVarsProvider as Experimental_CssVarsProvider };"]},"metadata":{},"sourceType":"module"}