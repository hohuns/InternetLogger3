{"ast":null,"code":"var _jsxFileName = \"/Users/sungjaejoo/Desktop/\\u1105\\u1175\\u110B\\u1162\\u11A8\\u1110\\u1173/\\u110B\\u1175\\u11AB\\u1110\\u1165\\u1105\\u1169\\u1100\\u1165/\\u1100\\u1175\\u11BA\\u1112\\u1165\\u1107\\u1173/ILP-main/src/components/MessageLogForm/MessageLogFormEn.tsx\";\nimport React, { useState, useEffect, useCallback } from \"react\";\nimport AddNoteEn from \"./AddNoteEn\";\nimport { useAppSelector, useAppDispatch } from \"../../store/hooks\";\nimport { useNavigate } from \"react-router-dom\";\nimport NoteListEn from \"./NoteListEn\";\n\nconst MessageLogFormEn = () => {\n  const reduxUser = useAppSelector(state => state.user);\n  const dispatch = useAppDispatch();\n  const [note, setNote] = useState([]);\n  const [error, setError] = useState(\"\");\n  const [isLoading, setIsLoading] = useState(false);\n  const [isbuttonPressed, setIsbuttonPressed] = useState(false);\n  let navigate = useNavigate();\n  const fetchNoteHandlerEn = useCallback(async () => {\n    setIsLoading(true);\n    setError(\"\");\n\n    try {\n      const response = await fetch(\"https://react-http-2887f-default-rtdb.firebaseio.com/notes.json\");\n\n      if (!response.ok) {\n        throw new Error(\"Something went wrong!\");\n      }\n\n      const data = await response.json();\n      console.log(data);\n      const loadedNotes = [];\n\n      for (const key in data) {\n        loadedNotes.push({\n          id: key,\n          title: data[key].title,\n          text: data[key].text,\n          date: `${data[key].logger}  ${t(`MessageLogFormEn.logMessage`)} ${data[key].date}....`\n        });\n      }\n\n      loadedNotes.reverse();\n      console.log(loadedNotes);\n      setNote(loadedNotes);\n    } catch (err) {\n      if (err instanceof Error) {\n        setError(err.message);\n      }\n    }\n\n    setIsLoading(false);\n  }, []);\n\n  async function addNoteHandlerEn(note) {\n    const response = await fetch(\"https://react-http-2887f-default-rtdb.firebaseio.com/notes.json\", {\n      method: \"POST\",\n      body: JSON.stringify(note),\n      headers: {\n        \"Content-Type\": \"appication/json\"\n      }\n    });\n    const data = await response.json();\n    console.log(data);\n    alert(`Message is successfully added..!`);\n    fetchNoteHandlerEn();\n  }\n\n  useEffect(() => {\n    fetchNoteHandlerEn();\n  }, [fetchNoteHandlerEn]);\n  let content = /*#__PURE__*/React.createElement(\"p\", {\n    style: {\n      color: \"white\"\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 80,\n      columnNumber: 17\n    }\n  }, \"Found no Notes.\");\n\n  if (note.length > 0) {\n    content = /*#__PURE__*/React.createElement(NoteListEn, {\n      note: note,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 83,\n        columnNumber: 15\n      }\n    });\n  }\n\n  if (error) {\n    content = /*#__PURE__*/React.createElement(\"p\", {\n      style: {\n        color: \"white\"\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 87,\n        columnNumber: 15\n      }\n    }, error);\n  }\n\n  if (isLoading) {\n    content = /*#__PURE__*/React.createElement(\"p\", {\n      style: {\n        color: \"white\"\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 91,\n        columnNumber: 15\n      }\n    }, \"Loading...\");\n  }\n\n  return /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 95,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(\"section\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 96,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(\"h3\", {\n    style: {\n      color: \"white\"\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 97,\n      columnNumber: 9\n    }\n  }, \"Welcome..! \", reduxUser, \" \"), /*#__PURE__*/React.createElement(\"button\", {\n    onClick: fetchNoteHandlerEn,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 98,\n      columnNumber: 9\n    }\n  }, \"Update Notes\"), /*#__PURE__*/React.createElement(\"button\", {\n    onClick: () => {\n      setIsbuttonPressed(true);\n    },\n    style: {\n      marginLeft: \"20px\"\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 99,\n      columnNumber: 9\n    }\n  }, \"Write Log\")), isbuttonPressed && /*#__PURE__*/React.createElement(\"section\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 109,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(\"h3\", {\n    style: {\n      color: \"white\"\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 110,\n      columnNumber: 11\n    }\n  }, \"Log Format\"), /*#__PURE__*/React.createElement(AddNoteEn, {\n    AddNote: addNoteHandlerEn,\n    logger: reduxUser,\n    setIsbuttonPressed: setIsbuttonPressed,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 111,\n      columnNumber: 11\n    }\n  })), /*#__PURE__*/React.createElement(\"section\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 118,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(\"h3\", {\n    style: {\n      color: \"white\"\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 119,\n      columnNumber: 9\n    }\n  }, \"Log\"), content));\n};\n\nexport default MessageLogFormEn;","map":{"version":3,"sources":["/Users/sungjaejoo/Desktop/리액트/인터로거/깃허브/ILP-main/src/components/MessageLogForm/MessageLogFormEn.tsx"],"names":["React","useState","useEffect","useCallback","AddNoteEn","useAppSelector","useAppDispatch","useNavigate","NoteListEn","MessageLogFormEn","reduxUser","state","user","dispatch","note","setNote","error","setError","isLoading","setIsLoading","isbuttonPressed","setIsbuttonPressed","navigate","fetchNoteHandlerEn","response","fetch","ok","Error","data","json","console","log","loadedNotes","key","push","id","title","text","date","logger","t","reverse","err","message","addNoteHandlerEn","method","body","JSON","stringify","headers","alert","content","color","length","marginLeft"],"mappings":"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","sourcesContent":["import React, { useState, useEffect, useCallback } from \"react\";\nimport AddNoteEn from \"./AddNoteEn\";\nimport { useAppSelector, useAppDispatch } from \"../../store/hooks\";\nimport { useNavigate } from \"react-router-dom\";\nimport { usersActions } from \"../../store/userSlice\";\nimport NoteListEn from \"./NoteListEn\";\nconst MessageLogFormEn = () => {\n  const reduxUser: string = useAppSelector((state) => state.user);\n  const dispatch = useAppDispatch();\n  const [note, setNote] = useState<\n    { id: string; title: any; text: any; date: string }[]\n  >([]);\n  const [error, setError] = useState<string>(\"\");\n  const [isLoading, setIsLoading] = useState(false);\n  const [isbuttonPressed, setIsbuttonPressed] = useState<boolean>(false);\n  let navigate = useNavigate();\n\n  const fetchNoteHandlerEn = useCallback(async () => {\n    setIsLoading(true);\n    setError(\"\");\n    try {\n      const response = await fetch(\n        \"https://react-http-2887f-default-rtdb.firebaseio.com/notes.json\"\n      );\n      if (!response.ok) {\n        throw new Error(\"Something went wrong!\");\n      }\n\n      const data = await response.json();\n      console.log(data);\n      const loadedNotes: { id: string; title: any; text: any; date: string }[] =\n        [];\n      for (const key in data) {\n        loadedNotes.push({\n          id: key,\n          title: data[key].title,\n          text: data[key].text,\n          date: `${data[key].logger}  ${t(`MessageLogFormEn.logMessage`)} ${\n            data[key].date\n          }....`,\n        });\n      }\n      loadedNotes.reverse();\n      console.log(loadedNotes);\n      setNote(loadedNotes);\n    } catch (err) {\n      if (err instanceof Error) {\n        setError(err.message);\n      }\n    }\n    setIsLoading(false);\n  }, []);\n\n  async function addNoteHandlerEn(note: {\n    id?: string;\n    title?: string;\n    text?: string;\n    date?: string;\n  }) {\n    const response = await fetch(\n      \"https://react-http-2887f-default-rtdb.firebaseio.com/notes.json\",\n      {\n        method: \"POST\",\n        body: JSON.stringify(note),\n        headers: {\n          \"Content-Type\": \"appication/json\",\n        },\n      }\n    );\n    const data = await response.json();\n    console.log(data);\n    alert(`Message is successfully added..!`);\n    fetchNoteHandlerEn();\n  }\n\n  useEffect(() => {\n    fetchNoteHandlerEn();\n  }, [fetchNoteHandlerEn]);\n\n  let content = <p style={{ color: \"white\" }}>Found no Notes.</p>;\n\n  if (note.length > 0) {\n    content = <NoteListEn note={note} />;\n  }\n\n  if (error) {\n    content = <p style={{ color: \"white\" }}>{error}</p>;\n  }\n\n  if (isLoading) {\n    content = <p style={{ color: \"white\" }}>Loading...</p>;\n  }\n\n  return (\n    <div>\n      <section>\n        <h3 style={{ color: \"white\" }}>Welcome..! {reduxUser} </h3>\n        <button onClick={fetchNoteHandlerEn}>Update Notes</button>\n        <button\n          onClick={() => {\n            setIsbuttonPressed(true);\n          }}\n          style={{ marginLeft: \"20px\" }}\n        >\n          Write Log\n        </button>\n      </section>\n      {isbuttonPressed && (\n        <section>\n          <h3 style={{ color: \"white\" }}>Log Format</h3>\n          <AddNoteEn\n            AddNote={addNoteHandlerEn}\n            logger={reduxUser}\n            setIsbuttonPressed={setIsbuttonPressed}\n          ></AddNoteEn>\n        </section>\n      )}\n      <section>\n        <h3 style={{ color: \"white\" }}>Log</h3>\n        {content}\n      </section>\n    </div>\n  );\n};\n\nexport default MessageLogFormEn;\n"]},"metadata":{},"sourceType":"module"}