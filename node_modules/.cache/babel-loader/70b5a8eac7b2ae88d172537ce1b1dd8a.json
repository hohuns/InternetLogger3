{"ast":null,"code":"import _regeneratorRuntime from\"/Users/sungjaejoo/Desktop/\\u1105\\u1175\\u110B\\u1162\\u11A8\\u1110\\u1173/\\u110B\\u1175\\u11AB\\u1110\\u1165\\u1105\\u1169\\u1100\\u1165/\\u1100\\u1175\\u11BA\\u1112\\u1165\\u1107\\u1173/ILP-main/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\";import _asyncToGenerator from\"/Users/sungjaejoo/Desktop/\\u1105\\u1175\\u110B\\u1162\\u11A8\\u1110\\u1173/\\u110B\\u1175\\u11AB\\u1110\\u1165\\u1105\\u1169\\u1100\\u1165/\\u1100\\u1175\\u11BA\\u1112\\u1165\\u1107\\u1173/ILP-main/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";import{Divider}from\"@mui/material\";import{TextField}from\"@mui/material\";import{Grid}from\"@mui/material\";import{Typography}from\"@mui/material\";import React,{useRef}from\"react\";import{useNavigate}from\"react-router-dom\";import{usersActions}from\"../../store/userSlice\";import{useAppSelector,useAppDispatch}from\"../../store/hooks\";import{useTranslation}from\"react-i18next\";var ChangePasswordForm=function ChangePasswordForm(){var pwRef=useRef(null);var navigate=useNavigate();var reduxidToken=useAppSelector(function(state){return state.idToken;});var reduxLan=useAppSelector(function(state){return state.lan;});var _useTranslation=useTranslation(\"main\"),t=_useTranslation.t;var dispatch=useAppDispatch();var logoutHandler=function logoutHandler(){dispatch(usersActions.updateIdToken(\"\"));dispatch(usersActions.updateIsLoggedIn(false));dispatch(usersActions.updateUser(\"\"));localStorage.removeItem(\"token\");localStorage.removeItem(\"isLoggedIn\");localStorage.removeItem(\"user\");navigate(\"/login\");};var formHandler=/*#__PURE__*/function(){var _ref=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee(){var _pwRef$current;var _pwRef$current2,data,errorMessage,json;return _regeneratorRuntime.wrap(function _callee$(_context){while(1){switch(_context.prev=_context.next){case 0:console.log((_pwRef$current=pwRef.current)===null||_pwRef$current===void 0?void 0:_pwRef$current.value);_context.prev=1;_context.next=4;return fetch(\"https://identitytoolkit.googleapis.com/v1/accounts:update?key=AIzaSyCkLePHqkPxNxPalsSLE_C4CbAaOiaGwNw\",{method:\"POST\",body:JSON.stringify({idToken:reduxidToken,password:(_pwRef$current2=pwRef.current)===null||_pwRef$current2===void 0?void 0:_pwRef$current2.value,returnSecureToken:false}),headers:{\"Content-Type\":\"application/json\"}});case 4:data=_context.sent;if(data.ok){_context.next=9;break;}console.log(data);errorMessage=t(\"ChangePasswordForm.formHandler-alert\");throw new Error(errorMessage);case 9:_context.next=11;return data.json();case 11:json=_context.sent;console.log(json);alert(t(\"ChangePasswordForm.formHandler-alert2\"));logoutHandler();_context.next=20;break;case 17:_context.prev=17;_context.t0=_context[\"catch\"](1);alert(_context.t0);case 20:case\"end\":return _context.stop();}}},_callee,null,[[1,17]]);}));return function formHandler(){return _ref.apply(this,arguments);};}();console.log(reduxidToken);return/*#__PURE__*/React.createElement(\"section\",null,/*#__PURE__*/React.createElement(Typography,{variant:\"h6\",color:\"white\"},t(\"ChangePasswordForm.formHandler-header\")),/*#__PURE__*/React.createElement(Divider,{sx:{backgroundColor:\"white\",marginTop:\"10px\"}}),/*#__PURE__*/React.createElement(Grid,{container:true,spacing:4,style:{marginTop:\"10px\"}},/*#__PURE__*/React.createElement(Grid,{item:true,xs:12,sm:3}),/*#__PURE__*/React.createElement(Grid,{item:true,xs:12,sm:6},/*#__PURE__*/React.createElement(TextField,{margin:\"dense\",required:true,name:\"pw\",sx:{input:{borderRadius:\"5px\",border:\"1px solid white\",color:\"white\"}},label:t(\"Loginform.input-pd\"),type:\"password\",fullWidth:true,inputRef:pwRef,InputLabelProps:{style:{color:\"#fff\"}}}),/*#__PURE__*/React.createElement(\"button\",{style:{marginTop:\"30px\"},onClick:formHandler},t(\"SignInForm.button-submit\")))));};export default ChangePasswordForm;","map":{"version":3,"sources":["/Users/sungjaejoo/Desktop/리액트/인터로거/깃허브/ILP-main/src/components/ChangePasswordForm/ChangePasswordForm.tsx"],"names":["Divider","TextField","Grid","Typography","React","useRef","useNavigate","usersActions","useAppSelector","useAppDispatch","useTranslation","ChangePasswordForm","pwRef","navigate","reduxidToken","state","idToken","reduxLan","lan","t","dispatch","logoutHandler","updateIdToken","updateIsLoggedIn","updateUser","localStorage","removeItem","formHandler","console","log","current","value","fetch","method","body","JSON","stringify","password","returnSecureToken","headers","data","ok","errorMessage","Error","json","alert","backgroundColor","marginTop","input","borderRadius","border","color","style"],"mappings":"ykBAAA,OAASA,OAAT,KAAwB,eAAxB,CACA,OAASC,SAAT,KAA0B,eAA1B,CACA,OAASC,IAAT,KAAqB,eAArB,CACA,OAASC,UAAT,KAA2B,eAA3B,CACA,MAAOC,CAAAA,KAAP,EAAgBC,MAAhB,KAA8B,OAA9B,CAEA,OAASC,WAAT,KAA4B,kBAA5B,CACA,OAASC,YAAT,KAA6B,uBAA7B,CACA,OAASC,cAAT,CAAyBC,cAAzB,KAA+C,mBAA/C,CACA,OAASC,cAAT,KAA+B,eAA/B,CAEA,GAAMC,CAAAA,kBAAkB,CAAG,QAArBA,CAAAA,kBAAqB,EAAM,CAC/B,GAAMC,CAAAA,KAAK,CAAGP,MAAM,CAAmB,IAAnB,CAApB,CACA,GAAIQ,CAAAA,QAAQ,CAAGP,WAAW,EAA1B,CACA,GAAMQ,CAAAA,YAAoB,CAAGN,cAAc,CAAC,SAACO,KAAD,QAAWA,CAAAA,KAAK,CAACC,OAAjB,EAAD,CAA3C,CACA,GAAMC,CAAAA,QAAgB,CAAGT,cAAc,CAAC,SAACO,KAAD,QAAWA,CAAAA,KAAK,CAACG,GAAjB,EAAD,CAAvC,CACA,oBAAcR,cAAc,CAAC,MAAD,CAA5B,CAAQS,CAAR,iBAAQA,CAAR,CACA,GAAMC,CAAAA,QAAQ,CAAGX,cAAc,EAA/B,CAEA,GAAMY,CAAAA,aAAa,CAAG,QAAhBA,CAAAA,aAAgB,EAAM,CAC1BD,QAAQ,CAACb,YAAY,CAACe,aAAb,CAA2B,EAA3B,CAAD,CAAR,CACAF,QAAQ,CAACb,YAAY,CAACgB,gBAAb,CAA8B,KAA9B,CAAD,CAAR,CACAH,QAAQ,CAACb,YAAY,CAACiB,UAAb,CAAwB,EAAxB,CAAD,CAAR,CACAC,YAAY,CAACC,UAAb,CAAwB,OAAxB,EACAD,YAAY,CAACC,UAAb,CAAwB,YAAxB,EACAD,YAAY,CAACC,UAAb,CAAwB,MAAxB,EACAb,QAAQ,CAAC,QAAD,CAAR,CACD,CARD,CAUA,GAAMc,CAAAA,WAAW,0FAAG,iMAClBC,OAAO,CAACC,GAAR,iBAAYjB,KAAK,CAACkB,OAAlB,yCAAY,eAAeC,KAA3B,EADkB,sCAGGC,CAAAA,KAAK,CACtB,uGADsB,CAEtB,CACEC,MAAM,CAAE,MADV,CAEEC,IAAI,CAAEC,IAAI,CAACC,SAAL,CAAe,CACnBpB,OAAO,CAAEF,YADU,CAEnBuB,QAAQ,kBAAEzB,KAAK,CAACkB,OAAR,0CAAE,gBAAeC,KAFN,CAGnBO,iBAAiB,CAAE,KAHA,CAAf,CAFR,CAOEC,OAAO,CAAE,CACP,eAAgB,kBADT,CAPX,CAFsB,CAHR,QAGVC,IAHU,kBAiBXA,IAAI,CAACC,EAjBM,yBAkBdb,OAAO,CAACC,GAAR,CAAYW,IAAZ,EACIE,YAnBU,CAmBKvB,CAAC,CAAC,sCAAD,CAnBN,MAoBR,IAAIwB,CAAAA,KAAJ,CAAUD,YAAV,CApBQ,+BAuBGF,CAAAA,IAAI,CAACI,IAAL,EAvBH,SAuBVA,IAvBU,eAwBhBhB,OAAO,CAACC,GAAR,CAAYe,IAAZ,EACAC,KAAK,CAAC1B,CAAC,CAAC,uCAAD,CAAF,CAAL,CACAE,aAAa,GA1BG,iFA4BhBwB,KAAK,aAAL,CA5BgB,qEAAH,kBAAXlB,CAAAA,WAAW,0CAAjB,CAgCAC,OAAO,CAACC,GAAR,CAAYf,YAAZ,EACA,mBACE,gDACE,oBAAC,UAAD,EAAY,OAAO,CAAC,IAApB,CAAyB,KAAK,CAAC,OAA/B,EACGK,CAAC,CAAC,uCAAD,CADJ,CADF,cAIE,oBAAC,OAAD,EAAS,EAAE,CAAE,CAAE2B,eAAe,CAAE,OAAnB,CAA4BC,SAAS,CAAE,MAAvC,CAAb,EAJF,cAKE,oBAAC,IAAD,EAAM,SAAS,KAAf,CAAgB,OAAO,CAAE,CAAzB,CAA4B,KAAK,CAAE,CAAEA,SAAS,CAAE,MAAb,CAAnC,eACE,oBAAC,IAAD,EAAM,IAAI,KAAV,CAAW,EAAE,CAAE,EAAf,CAAmB,EAAE,CAAE,CAAvB,EADF,cAIE,oBAAC,IAAD,EAAM,IAAI,KAAV,CAAW,EAAE,CAAE,EAAf,CAAmB,EAAE,CAAE,CAAvB,eACE,oBAAC,SAAD,EACE,MAAM,CAAC,OADT,CAEE,QAAQ,KAFV,CAGE,IAAI,CAAC,IAHP,CAIE,EAAE,CAAE,CACFC,KAAK,CAAE,CACLC,YAAY,CAAE,KADT,CAELC,MAAM,CAAE,iBAFH,CAGLC,KAAK,CAAE,OAHF,CADL,CAJN,CAWE,KAAK,CAAEhC,CAAC,CAAC,oBAAD,CAXV,CAYE,IAAI,CAAC,UAZP,CAaE,SAAS,KAbX,CAcE,QAAQ,CAAEP,KAdZ,CAeE,eAAe,CAAE,CACfwC,KAAK,CAAE,CAAED,KAAK,CAAE,MAAT,CADQ,CAfnB,EADF,cAoBE,8BAAQ,KAAK,CAAE,CAAEJ,SAAS,CAAE,MAAb,CAAf,CAAsC,OAAO,CAAEpB,WAA/C,EACGR,CAAC,CAAC,0BAAD,CADJ,CApBF,CAJF,CALF,CADF,CAqCD,CAxFD,CA0FA,cAAeR,CAAAA,kBAAf","sourcesContent":["import { Divider } from \"@mui/material\";\nimport { TextField } from \"@mui/material\";\nimport { Grid } from \"@mui/material\";\nimport { Typography } from \"@mui/material\";\nimport React, { useRef } from \"react\";\nimport { logIn } from \"../../Service/ApiService\";\nimport { useNavigate } from \"react-router-dom\";\nimport { usersActions } from \"../../store/userSlice\";\nimport { useAppSelector, useAppDispatch } from \"../../store/hooks\";\nimport { useTranslation } from \"react-i18next\";\n\nconst ChangePasswordForm = () => {\n  const pwRef = useRef<HTMLInputElement>(null);\n  let navigate = useNavigate();\n  const reduxidToken: string = useAppSelector((state) => state.idToken);\n  const reduxLan: string = useAppSelector((state) => state.lan);\n  const { t } = useTranslation(\"main\");\n  const dispatch = useAppDispatch();\n\n  const logoutHandler = () => {\n    dispatch(usersActions.updateIdToken(\"\"));\n    dispatch(usersActions.updateIsLoggedIn(false));\n    dispatch(usersActions.updateUser(\"\"));\n    localStorage.removeItem(\"token\");\n    localStorage.removeItem(\"isLoggedIn\");\n    localStorage.removeItem(\"user\");\n    navigate(\"/login\");\n  };\n\n  const formHandler = async () => {\n    console.log(pwRef.current?.value);\n    try {\n      const data = await fetch(\n        \"https://identitytoolkit.googleapis.com/v1/accounts:update?key=AIzaSyCkLePHqkPxNxPalsSLE_C4CbAaOiaGwNw\",\n        {\n          method: \"POST\",\n          body: JSON.stringify({\n            idToken: reduxidToken,\n            password: pwRef.current?.value,\n            returnSecureToken: false,\n          }),\n          headers: {\n            \"Content-Type\": \"application/json\",\n          },\n        }\n      );\n      if (!data.ok) {\n        console.log(data);\n        let errorMessage = t(\"ChangePasswordForm.formHandler-alert\");\n        throw new Error(errorMessage);\n      }\n\n      const json = await data.json();\n      console.log(json);\n      alert(t(\"ChangePasswordForm.formHandler-alert2\"));\n      logoutHandler();\n    } catch (err) {\n      alert(err);\n    }\n  };\n\n  console.log(reduxidToken);\n  return (\n    <section>\n      <Typography variant=\"h6\" color=\"white\">\n        {t(\"ChangePasswordForm.formHandler-header\")}\n      </Typography>\n      <Divider sx={{ backgroundColor: \"white\", marginTop: \"10px\" }} />\n      <Grid container spacing={4} style={{ marginTop: \"10px\" }}>\n        <Grid item xs={12} sm={3}>\n          {}\n        </Grid>\n        <Grid item xs={12} sm={6}>\n          <TextField\n            margin=\"dense\"\n            required\n            name=\"pw\"\n            sx={{\n              input: {\n                borderRadius: \"5px\",\n                border: \"1px solid white\",\n                color: \"white\",\n              },\n            }}\n            label={t(\"Loginform.input-pd\")}\n            type=\"password\"\n            fullWidth\n            inputRef={pwRef}\n            InputLabelProps={{\n              style: { color: \"#fff\" },\n            }}\n          />\n          <button style={{ marginTop: \"30px\" }} onClick={formHandler}>\n            {t(\"SignInForm.button-submit\")}\n          </button>\n        </Grid>\n      </Grid>\n    </section>\n  );\n};\n\nexport default ChangePasswordForm;\n"]},"metadata":{},"sourceType":"module"}