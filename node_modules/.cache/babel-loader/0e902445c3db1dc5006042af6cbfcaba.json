{"ast":null,"code":"var _jsxFileName = \"/Users/sungjaejoo/Desktop/\\u1105\\u1175\\u110B\\u1162\\u11A8\\u1110\\u1173/\\u110B\\u1175\\u11AB\\u1110\\u1165\\u1105\\u1169\\u1100\\u1165/\\u1100\\u1175\\u11BA\\u1112\\u1165\\u1107\\u1173/ILP-main/src/components/MessageLogForm/AddNoteEn.tsx\";\nimport React, { useRef } from \"react\";\nimport { useAppSelector } from \"../../store/hooks\";\nimport { useTranslation } from \"react-i18next\";\nimport \"./AddNote.css\";\n\nfunction AddNoteEn(props) {\n  const titleRef = useRef(null);\n  const textRef = useRef(null);\n  const now = new Date();\n  const reduxUserInfo = useAppSelector(state => state.user);\n  const {\n    t\n  } = useTranslation(\"main\");\n\n  function submitHandler(event) {\n    var _titleRef$current, _textRef$current;\n\n    if (((_titleRef$current = titleRef.current) === null || _titleRef$current === void 0 ? void 0 : _titleRef$current.value) && ((_textRef$current = textRef.current) === null || _textRef$current === void 0 ? void 0 : _textRef$current.value)) {\n      var _titleRef$current2, _textRef$current2;\n\n      event.preventDefault();\n      const notes = {\n        title: (_titleRef$current2 = titleRef.current) === null || _titleRef$current2 === void 0 ? void 0 : _titleRef$current2.value,\n        text: (_textRef$current2 = textRef.current) === null || _textRef$current2 === void 0 ? void 0 : _textRef$current2.value,\n        date: now.toLocaleString(),\n        logger: reduxUserInfo\n      };\n      props.AddNote(notes);\n      props.setIsbuttonPressed(false);\n      titleRef.current.value = \"\";\n      textRef.current.value = \"\";\n    } else {\n      alert(\"Please input required fields.\");\n    }\n  }\n\n  return /*#__PURE__*/React.createElement(\"form\", {\n    onSubmit: submitHandler,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 47,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"control\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 48,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(\"label\", {\n    htmlFor: \"title\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 49,\n      columnNumber: 9\n    }\n  }, \"Title\"), /*#__PURE__*/React.createElement(\"input\", {\n    type: \"text\",\n    id: \"title\",\n    ref: titleRef,\n    style: {\n      color: \"white\"\n    },\n    placeholder: t(`AddNoteEn.titlePlaceHolder`),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 50,\n      columnNumber: 9\n    }\n  })), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"control\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 58,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(\"label\", {\n    htmlFor: \"text-log\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 59,\n      columnNumber: 9\n    }\n  }, \"Text Log\"), /*#__PURE__*/React.createElement(\"textarea\", {\n    rows: 5,\n    id: \"text-log\",\n    ref: textRef,\n    style: {\n      color: \"white\"\n    },\n    placeholder: t(`AddNoteEn.bodyPlaceHolder`),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 60,\n      columnNumber: 9\n    }\n  })), /*#__PURE__*/React.createElement(\"button\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 68,\n      columnNumber: 7\n    }\n  }, \"Submit\"));\n}\n\nexport default AddNoteEn;","map":{"version":3,"sources":["/Users/sungjaejoo/Desktop/리액트/인터로거/깃허브/ILP-main/src/components/MessageLogForm/AddNoteEn.tsx"],"names":["React","useRef","useAppSelector","useTranslation","AddNoteEn","props","titleRef","textRef","now","Date","reduxUserInfo","state","user","t","submitHandler","event","current","value","preventDefault","notes","title","text","date","toLocaleString","logger","AddNote","setIsbuttonPressed","alert","color"],"mappings":";AACA,OAAOA,KAAP,IAAgBC,MAAhB,QAA8B,OAA9B;AACA,SAASC,cAAT,QAA+C,mBAA/C;AACA,SAASC,cAAT,QAA+B,eAA/B;AACA,OAAO,eAAP;;AAeA,SAASC,SAAT,CAAmBC,KAAnB,EAA0C;AACxC,QAAMC,QAAQ,GAAGL,MAAM,CAAmB,IAAnB,CAAvB;AACA,QAAMM,OAAO,GAAGN,MAAM,CAAsB,IAAtB,CAAtB;AACA,QAAMO,GAAG,GAAG,IAAIC,IAAJ,EAAZ;AACA,QAAMC,aAAa,GAAGR,cAAc,CAAES,KAAD,IAAWA,KAAK,CAACC,IAAlB,CAApC;AACA,QAAM;AAAEC,IAAAA;AAAF,MAAQV,cAAc,CAAC,MAAD,CAA5B;;AAEA,WAASW,aAAT,CAAuBC,KAAvB,EAA+C;AAAA;;AAC7C,QAAI,sBAAAT,QAAQ,CAACU,OAAT,wEAAkBC,KAAlB,0BAA2BV,OAAO,CAACS,OAAnC,qDAA2B,iBAAiBC,KAA5C,CAAJ,EAAuD;AAAA;;AACrDF,MAAAA,KAAK,CAACG,cAAN;AACA,YAAMC,KAAK,GAAG;AACZC,QAAAA,KAAK,wBAAEd,QAAQ,CAACU,OAAX,uDAAE,mBAAkBC,KADb;AAEZI,QAAAA,IAAI,uBAAEd,OAAO,CAACS,OAAV,sDAAE,kBAAiBC,KAFX;AAGZK,QAAAA,IAAI,EAAEd,GAAG,CAACe,cAAJ,EAHM;AAIZC,QAAAA,MAAM,EAAEd;AAJI,OAAd;AAOAL,MAAAA,KAAK,CAACoB,OAAN,CAAcN,KAAd;AACAd,MAAAA,KAAK,CAACqB,kBAAN,CAAyB,KAAzB;AACApB,MAAAA,QAAQ,CAACU,OAAT,CAAkBC,KAAlB,GAA0B,EAA1B;AACAV,MAAAA,OAAO,CAACS,OAAR,CAAiBC,KAAjB,GAAyB,EAAzB;AACD,KAbD,MAaO;AACLU,MAAAA,KAAK,CAAC,+BAAD,CAAL;AACD;AACF;;AAED,sBACE;AAAM,IAAA,QAAQ,EAAEb,aAAhB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACE;AAAK,IAAA,SAAS,EAAC,SAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACE;AAAO,IAAA,OAAO,EAAC,OAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,aADF,eAEE;AACE,IAAA,IAAI,EAAC,MADP;AAEE,IAAA,EAAE,EAAC,OAFL;AAGE,IAAA,GAAG,EAAER,QAHP;AAIE,IAAA,KAAK,EAAE;AAAEsB,MAAAA,KAAK,EAAE;AAAT,KAJT;AAKE,IAAA,WAAW,EAAEf,CAAC,CAAE,4BAAF,CALhB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAFF,CADF,eAWE;AAAK,IAAA,SAAS,EAAC,SAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACE;AAAO,IAAA,OAAO,EAAC,UAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBADF,eAEE;AACE,IAAA,IAAI,EAAE,CADR;AAEE,IAAA,EAAE,EAAC,UAFL;AAGE,IAAA,GAAG,EAAEN,OAHP;AAIE,IAAA,KAAK,EAAE;AAAEqB,MAAAA,KAAK,EAAE;AAAT,KAJT;AAKE,IAAA,WAAW,EAAEf,CAAC,CAAE,2BAAF,CALhB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAFF,CAXF,eAqBE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cArBF,CADF;AAyBD;;AAED,eAAeT,SAAf","sourcesContent":["import { string } from \"@inovua/reactdatagrid-community/filterTypes\";\nimport React, { useRef } from \"react\";\nimport { useAppSelector, useAppDispatch } from \"../../store/hooks\";\nimport { useTranslation } from \"react-i18next\";\nimport \"./AddNote.css\";\n\ntype AddNoteENProps = {\n  //optional chianing\n  AddNote: (notes: {\n    title?: string;\n    text?: string;\n    date?: string;\n    logger?: string;\n  }) => void;\n\n  logger: string;\n  setIsbuttonPressed: (boolean: boolean) => void;\n};\n\nfunction AddNoteEn(props: AddNoteENProps) {\n  const titleRef = useRef<HTMLInputElement>(null);\n  const textRef = useRef<HTMLTextAreaElement>(null);\n  const now = new Date();\n  const reduxUserInfo = useAppSelector((state) => state.user);\n  const { t } = useTranslation(\"main\");\n\n  function submitHandler(event: React.FormEvent) {\n    if (titleRef.current?.value && textRef.current?.value) {\n      event.preventDefault();\n      const notes = {\n        title: titleRef.current?.value,\n        text: textRef.current?.value,\n        date: now.toLocaleString(),\n        logger: reduxUserInfo,\n      };\n\n      props.AddNote(notes);\n      props.setIsbuttonPressed(false);\n      titleRef.current!.value = \"\";\n      textRef.current!.value = \"\";\n    } else {\n      alert(\"Please input required fields.\");\n    }\n  }\n\n  return (\n    <form onSubmit={submitHandler}>\n      <div className=\"control\">\n        <label htmlFor=\"title\">Title</label>\n        <input\n          type=\"text\"\n          id=\"title\"\n          ref={titleRef}\n          style={{ color: \"white\" }}\n          placeholder={t(`AddNoteEn.titlePlaceHolder`)}\n        />\n      </div>\n      <div className=\"control\">\n        <label htmlFor=\"text-log\">Text Log</label>\n        <textarea\n          rows={5}\n          id=\"text-log\"\n          ref={textRef}\n          style={{ color: \"white\" }}\n          placeholder={t(`AddNoteEn.bodyPlaceHolder`)}\n        ></textarea>\n      </div>\n      <button>Submit</button>\n    </form>\n  );\n}\n\nexport default AddNoteEn;\n"]},"metadata":{},"sourceType":"module"}